version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кэширования и очередей Celery
  redis:
    image: redis:alpine
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000"

  # Celery воркер для фоновых задач
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./backend:/app
    env_file:
      - ./.env
    depends_on:
      - backend
      - redis
    command: celery -A config worker -l info

  # Celery beat для периодических задач
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./backend:/app
    env_file:
      - ./.env
    depends_on:
      - backend
      - redis
      - celery
    command: celery -A config beat -l info

  # React frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - ./.env
    depends_on:
      - backend
    command: npm start

  # Nginx для проксирования запросов
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/html/static
      - media_volume:/var/html/media
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: